'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _kbpgp = require('kbpgp');

var _kbpgp2 = _interopRequireDefault(_kbpgp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var importFromArmoredPgp = _bluebird2.default.promisify(_kbpgp2.default.KeyManager.import_from_armored_pgp);
var box = _bluebird2.default.promisify(_kbpgp2.default.box);

module.exports = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(publicKey, message) {
    var keyManager, encryptedMessage;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return importFromArmoredPgp({ armored: publicKey }).then(function (keyManager) {
              return keyManager;
            });

          case 3:
            keyManager = _context.sent;
            _context.next = 6;
            return box({ encrypt_for: keyManager, msg: message }).then(function (encrypted) {
              return encrypted;
            });

          case 6:
            encryptedMessage = _context.sent;
            return _context.abrupt('return', _promise2.default.resolve(encryptedMessage));

          case 10:
            _context.prev = 10;
            _context.t0 = _context['catch'](0);
            return _context.abrupt('return', _promise2.default.reject(_context.t0));

          case 13:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 10]]);
  }));

  function encrypt(_x, _x2) {
    return _ref.apply(this, arguments);
  }

  return encrypt;
}();